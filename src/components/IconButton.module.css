.Button {
  /* if <button>, reset styles */
  border: 0;
  background-color: transparent;
  cursor: pointer;
  /* if <a>, reset styles */
  color: var(--fg-normal);
  text-decoration: none;
  /* custom styles */
  display: flex;
  flex-direction: column;
  align-items: center;
  width: fit-content;
  height: fit-content;
  /* hide default outline */
  outline: 0;
}
.Button > * {
  text-align: center;
  width: 100%;
}
.Button_svgWrapper {
  /* make a round circle */
  height: calc(var(--iconsize-m)+var(--padding-s));
  width: calc(var(--iconsize-m)+var(--padding-s));
  padding: var(--padding-s);
  border-radius: 1000px;
  /* center icon in circle */
  display: flex;
  align-items: center;
}
.Button_svgWrapper > svg {
  height: var(--iconsize-m);
  width: var(--iconsize-m);
}
/* Label */
.Button_label {
  height: 0; /* so that only the circles are taken into account for when aligning */
  color: var(--fg-subtle);
  font-size: var(--fontsize-body-s);
}

/* INTERACTIONS */

.Button:hover > .Button_svgWrapper,
.Button:focus > .Button_svgWrapper {
  background-color: var(--bg-accent-hovered);
}
.Button:hover > .Button_svgWrapper > svg,
.Button:focus > .Button_svgWrapper > svg {
  color: var(--fg-accent);
}
.Button:hover > .Button_label,
.Button:focus > .Button_label {
  color: var(--fg-normal);
}

/* Simulate default outline around SVG only */
.Button:focus > .Button_svgWrapper {
  outline: var(--outline);
  outline-offset: var(--outline-offset);
}
